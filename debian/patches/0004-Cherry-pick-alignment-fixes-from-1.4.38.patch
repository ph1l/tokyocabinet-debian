From 8d491a0102beaf0c094b1374632c964a79d11d2f Mon Sep 17 00:00:00 2001
From: Pierre Habouzit <madcoder@debian.org>
Date: Tue, 10 Nov 2009 21:50:21 +0100
Subject: [PATCH 4/4] Cherry-pick alignment fixes from 1.4.38.

Signed-off-by: Pierre Habouzit <madcoder@debian.org>
---
 tcbdb.c |    6 +++---
 tcfdb.c |    8 ++++----
 tchdb.c |    6 +++---
 3 files changed, 10 insertions(+), 10 deletions(-)

diff --git a/tcbdb.c b/tcbdb.c
index 56ef58b..82e240f 100644
--- a/tcbdb.c
+++ b/tcbdb.c
@@ -1643,10 +1643,10 @@ bool tcbdbputproc(TCBDB *bdb, const void *kbuf, int ksiz, const void *vbuf, int
   procop.proc = proc;
   procop.op = op;
   BDBPDPROCOP *procptr = &procop;
-  char stack[TCNUMBUFSIZ*2];
+  void *stack[(TCNUMBUFSIZ*2)/sizeof(void *)+1];
   char *rbuf;
   if(ksiz <= sizeof(stack) - sizeof(procptr)){
-    rbuf = stack;
+    rbuf = (char *)stack;
   } else {
     TCMALLOC(rbuf, ksiz + sizeof(procptr));
   }
@@ -1656,7 +1656,7 @@ bool tcbdbputproc(TCBDB *bdb, const void *kbuf, int ksiz, const void *vbuf, int
   memcpy(wp, kbuf, ksiz);
   kbuf = rbuf + sizeof(procptr);
   bool rv = tcbdbputimpl(bdb, kbuf, ksiz, vbuf, vsiz, BDBPDPROC);
-  if(rbuf != stack) TCFREE(rbuf);
+  if(rbuf != (char *)stack) TCFREE(rbuf);
   BDBUNLOCKMETHOD(bdb);
   return rv;
 }
diff --git a/tcfdb.c b/tcfdb.c
index c673a4f..4743993 100644
--- a/tcfdb.c
+++ b/tcfdb.c
@@ -1294,11 +1294,11 @@ bool tcfdbputproc(TCFDB *fdb, int64_t id, const void *vbuf, int vsiz, TCPDPROC p
   procop.proc = proc;
   procop.op = op;
   FDBPDPROCOP *procptr = &procop;
-  char stack[FDBDEFWIDTH+TCNUMBUFSIZ];
+  void *stack[(FDBDEFWIDTH+TCNUMBUFSIZ)/sizeof(void *)+1];
   char *rbuf;
   if(vbuf){
     if(vsiz <= sizeof(stack) - sizeof(procptr)){
-      rbuf = stack;
+      rbuf = (char *)stack;
     } else {
       TCMALLOC(rbuf, vsiz + sizeof(procptr));
     }
@@ -1308,13 +1308,13 @@ bool tcfdbputproc(TCFDB *fdb, int64_t id, const void *vbuf, int vsiz, TCPDPROC p
     memcpy(wp, vbuf, vsiz);
     vbuf = rbuf + sizeof(procptr);
   } else {
-    rbuf = stack;
+    rbuf = (char *)stack;
     memcpy(rbuf, &procptr, sizeof(procptr));
     vbuf = rbuf + sizeof(procptr);
     vsiz = -1;
   }
   bool rv = tcfdbputimpl(fdb, id, vbuf, vsiz, FDBPDPROC);
-  if(rbuf != stack) TCFREE(rbuf);
+  if(rbuf != (char *)stack) TCFREE(rbuf);
   FDBUNLOCKRECORD(fdb, id);
   FDBUNLOCKMETHOD(fdb);
   return rv;
diff --git a/tchdb.c b/tchdb.c
index 3a4d171..bbdfaed 100644
--- a/tchdb.c
+++ b/tchdb.c
@@ -1668,10 +1668,10 @@ bool tchdbputproc(TCHDB *hdb, const void *kbuf, int ksiz, const void *vbuf, int
   procop.proc = proc;
   procop.op = op;
   HDBPDPROCOP *procptr = &procop;
-  char stack[TCNUMBUFSIZ*2];
+  void *stack[(TCNUMBUFSIZ*2)/sizeof(void *)+1];
   char *rbuf;
   if(ksiz <= sizeof(stack) - sizeof(procptr)){
-    rbuf = stack;
+    rbuf = (char *)stack;
   } else {
     TCMALLOC(rbuf, ksiz + sizeof(procptr));
   }
@@ -1681,7 +1681,7 @@ bool tchdbputproc(TCHDB *hdb, const void *kbuf, int ksiz, const void *vbuf, int
   memcpy(wp, kbuf, ksiz);
   kbuf = rbuf + sizeof(procptr);
   bool rv = tchdbputimpl(hdb, kbuf, ksiz, bidx, hash, vbuf, vsiz, HDBPDPROC);
-  if(rbuf != stack) TCFREE(rbuf);
+  if(rbuf != (char *)stack) TCFREE(rbuf);
   HDBUNLOCKRECORD(hdb, bidx);
   HDBUNLOCKMETHOD(hdb);
   if(hdb->dfunit > 0 && hdb->dfcnt > hdb->dfunit &&
-- 
1.6.5.2.342.g27b86


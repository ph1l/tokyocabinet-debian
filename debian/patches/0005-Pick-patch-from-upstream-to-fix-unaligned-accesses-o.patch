From 24d5c34e6289ca2cddb07e8f8fdde0391283af76 Mon Sep 17 00:00:00 2001
From: Pierre Habouzit <madcoder@debian.org>
Date: Thu, 12 Nov 2009 12:53:07 +0100
Subject: [PATCH 5/6] Pick patch from upstream to fix unaligned accesses on sparc.

2009-11-11  Mikio Hirabayashi  <hirarin@gmail.com>

	* tcutil.h (TCALIGNOF, tcgeneric_t): new macros.

	* tcutil.h (TCALIGNPAD): the alignment is now calculated by the generic union.
---
 myconf.h   |    2 +-
 tcbdb.c    |    2 +-
 tcfdb.c    |    2 +-
 tchdb.c    |    2 +-
 tcucodec.c |   61 ++++++++++++++++++++++++++++++++++-------------------------
 tcutil.c   |    4 +-
 tcutil.h   |    8 ++++++-
 7 files changed, 48 insertions(+), 33 deletions(-)

diff --git a/myconf.h b/myconf.h
index 4e63b68..114f2a9 100644
--- a/myconf.h
+++ b/myconf.h
@@ -255,7 +255,7 @@
  *************************************************************************************************/
 
 
-#define sizeof(a)      ((int)sizeof(a))
+#define sizeof(TC_a)   ((int)sizeof(TC_a))
 
 #if defined(_SYS_FREEBSD_) || defined(_SYS_NETBSD_) || defined(_SYS_OPENBSD_)
 #define nan(TC_a)      strtod("nan", NULL)
diff --git a/tcbdb.c b/tcbdb.c
index 82e240f..64a68f0 100644
--- a/tcbdb.c
+++ b/tcbdb.c
@@ -1643,7 +1643,7 @@ bool tcbdbputproc(TCBDB *bdb, const void *kbuf, int ksiz, const void *vbuf, int
   procop.proc = proc;
   procop.op = op;
   BDBPDPROCOP *procptr = &procop;
-  void *stack[(TCNUMBUFSIZ*2)/sizeof(void *)+1];
+  tcgeneric_t stack[(TCNUMBUFSIZ*2)/sizeof(tcgeneric_t)+1];
   char *rbuf;
   if(ksiz <= sizeof(stack) - sizeof(procptr)){
     rbuf = (char *)stack;
diff --git a/tcfdb.c b/tcfdb.c
index 4743993..67af5ab 100644
--- a/tcfdb.c
+++ b/tcfdb.c
@@ -1294,7 +1294,7 @@ bool tcfdbputproc(TCFDB *fdb, int64_t id, const void *vbuf, int vsiz, TCPDPROC p
   procop.proc = proc;
   procop.op = op;
   FDBPDPROCOP *procptr = &procop;
-  void *stack[(FDBDEFWIDTH+TCNUMBUFSIZ)/sizeof(void *)+1];
+  tcgeneric_t stack[(FDBDEFWIDTH+TCNUMBUFSIZ)/sizeof(tcgeneric_t)+1];
   char *rbuf;
   if(vbuf){
     if(vsiz <= sizeof(stack) - sizeof(procptr)){
diff --git a/tchdb.c b/tchdb.c
index bbdfaed..8e42238 100644
--- a/tchdb.c
+++ b/tchdb.c
@@ -1668,7 +1668,7 @@ bool tchdbputproc(TCHDB *hdb, const void *kbuf, int ksiz, const void *vbuf, int
   procop.proc = proc;
   procop.op = op;
   HDBPDPROCOP *procptr = &procop;
-  void *stack[(TCNUMBUFSIZ*2)/sizeof(void *)+1];
+  tcgeneric_t stack[(TCNUMBUFSIZ*2)/sizeof(tcgeneric_t)+1];
   char *rbuf;
   if(ksiz <= sizeof(stack) - sizeof(procptr)){
     rbuf = (char *)stack;
diff --git a/tcucodec.c b/tcucodec.c
index 7e6438f..50ad921 100644
--- a/tcucodec.c
+++ b/tcucodec.c
@@ -1271,33 +1271,42 @@ static int procconf(int mode){
     printf("myconf(bigend): %d\n", TCBIGEND);
     printf("myconf(usezlib): %d\n", TCUSEZLIB);
     printf("myconf(usebzip): %d\n", TCUSEBZIP);
-    printf("sizeof(bool): %d\n", sizeof(bool));
-    printf("sizeof(char): %d\n", sizeof(char));
-    printf("sizeof(short): %d\n", sizeof(short));
-    printf("sizeof(int): %d\n", sizeof(int));
-    printf("sizeof(long): %d\n", sizeof(long));
-    printf("sizeof(long long): %d\n", sizeof(long long));
-    printf("sizeof(float): %d\n", sizeof(float));
-    printf("sizeof(double): %d\n", sizeof(double));
-    printf("sizeof(long double): %d\n", sizeof(long double));
-    printf("sizeof(void *): %d\n", sizeof(void *));
-    printf("sizeof(intptr_t): %d\n", sizeof(intptr_t));
-    printf("sizeof(size_t): %d\n", sizeof(size_t));
-    printf("sizeof(time_t): %d\n", sizeof(time_t));
-    printf("sizeof(off_t): %d\n", sizeof(off_t));
-    printf("sizeof(ino_t): %d\n", sizeof(ino_t));
-    printf("sizeof(wchar_t): %d\n", sizeof(wchar_t));
-    printf("sizeof(sig_atomic_t): %d\n", sizeof(sig_atomic_t));
-    printf("macro(CHAR_MAX): %llu\n", (unsigned long long)CHAR_MAX);
-    printf("macro(SHRT_MAX): %llu\n", (unsigned long long)SHRT_MAX);
-    printf("macro(INT_MAX): %llu\n", (unsigned long long)INT_MAX);
-    printf("macro(LONG_MAX): %llu\n", (unsigned long long)LONG_MAX);
-    printf("macro(LLONG_MAX): %llu\n", (unsigned long long)LLONG_MAX);
-    printf("macro(FLT_MAX): %g\n", (double)FLT_MAX);
-    printf("macro(DBL_MAX): %g\n", (double)DBL_MAX);
-    printf("macro(LDBL_MAX): %Lg\n", (long double)LDBL_MAX);
-    printf("macro(PATH_MAX): %llu\n", (unsigned long long)PATH_MAX);
+    printf("type(bool): size=%d align=%d\n", sizeof(bool), TCALIGNOF(bool));
+    printf("type(char): size=%d align=%d max=%llu\n",
+           sizeof(char), TCALIGNOF(char), (unsigned long long)CHAR_MAX);
+    printf("type(short): size=%d align=%d max=%llu\n",
+           sizeof(short), TCALIGNOF(short), (unsigned long long)SHRT_MAX);
+    printf("type(int): size=%d align=%d max=%llu\n",
+           sizeof(int), TCALIGNOF(int), (unsigned long long)INT_MAX);
+    printf("type(long): size=%d align=%d max=%llu\n",
+           sizeof(long), TCALIGNOF(long), (unsigned long long)LONG_MAX);
+    printf("type(long long): size=%d align=%d max=%llu\n",
+           sizeof(long long), TCALIGNOF(long long), (unsigned long long)LLONG_MAX);
+    printf("type(float): size=%d align=%d max=%g\n",
+           sizeof(float), TCALIGNOF(float), (double)FLT_MAX);
+    printf("type(double): size=%d align=%d max=%g\n",
+           sizeof(double), TCALIGNOF(double), (double)DBL_MAX);
+    printf("type(long double): size=%d align=%d max=%Lg\n",
+           sizeof(long double), TCALIGNOF(long double), (long double)LDBL_MAX);
+    printf("type(void *): size=%d align=%d\n", sizeof(void *), TCALIGNOF(void *));
+    printf("type(intptr_t): size=%d align=%d max=%llu\n",
+           sizeof(intptr_t), TCALIGNOF(intptr_t), (unsigned long long)INTPTR_MAX);
+    printf("type(size_t): size=%d align=%d max=%llu\n",
+           sizeof(size_t), TCALIGNOF(size_t), (unsigned long long)SIZE_MAX);
+    printf("type(ptrdiff_t): size=%d align=%d max=%llu\n",
+           sizeof(ptrdiff_t), TCALIGNOF(ptrdiff_t), (unsigned long long)PTRDIFF_MAX);
+    printf("type(wchar_t): size=%d align=%d max=%llu\n",
+           sizeof(wchar_t), TCALIGNOF(wchar_t), (unsigned long long)WCHAR_MAX);
+    printf("type(sig_atomic_t): size=%d align=%d max=%llu\n",
+           sizeof(sig_atomic_t), TCALIGNOF(sig_atomic_t), (unsigned long long)SIG_ATOMIC_MAX);
+    printf("type(time_t): size=%d align=%d\n", sizeof(time_t), TCALIGNOF(time_t));
+    printf("type(off_t): size=%d align=%d\n", sizeof(off_t), TCALIGNOF(off_t));
+    printf("type(ino_t): size=%d align=%d\n", sizeof(ino_t), TCALIGNOF(ino_t));
+    printf("type(tcgeneric_t): size=%d align=%d\n", sizeof(tcgeneric_t), TCALIGNOF(tcgeneric_t));
     printf("macro(RAND_MAX): %llu\n", (unsigned long long)RAND_MAX);
+    printf("macro(PATH_MAX): %llu\n", (unsigned long long)PATH_MAX);
+    printf("macro(NAME_MAX): %llu\n", (unsigned long long)NAME_MAX);
+    printf("macro(P_tmpdir): %s\n", P_tmpdir);
     printf("sysconf(_SC_CLK_TCK): %ld\n", sysconf(_SC_CLK_TCK));
     printf("sysconf(_SC_OPEN_MAX): %ld\n", sysconf(_SC_OPEN_MAX));
     printf("sysconf(_SC_PAGESIZE): %ld\n", sysconf(_SC_PAGESIZE));
diff --git a/tcutil.c b/tcutil.c
index 4e807f8..98da5d5 100644
--- a/tcutil.c
+++ b/tcutil.c
@@ -1529,7 +1529,7 @@ uint64_t tcmaprnum(const TCMAP *map){
 /* Get the total size of memory used in a map object. */
 uint64_t tcmapmsiz(const TCMAP *map){
   assert(map);
-  return map->msiz + map->rnum * (sizeof(*map->first) + sizeof(void *)) +
+  return map->msiz + map->rnum * (sizeof(*map->first) + sizeof(tcgeneric_t)) +
     map->bnum * sizeof(void *);
 }
 
@@ -2886,7 +2886,7 @@ uint64_t tctreernum(const TCTREE *tree){
 /* Get the total size of memory used in a tree object. */
 uint64_t tctreemsiz(const TCTREE *tree){
   assert(tree);
-  return tree->msiz + tree->rnum * (sizeof(*tree->root) + sizeof(void *));
+  return tree->msiz + tree->rnum * (sizeof(*tree->root) + sizeof(tcgeneric_t));
 }
 
 
diff --git a/tcutil.h b/tcutil.h
index f63d717..679f224 100644
--- a/tcutil.h
+++ b/tcutil.h
@@ -3992,9 +3992,15 @@ uint64_t tcpagealign(uint64_t off);
   } while(false)
 
 
+/* Get the alignment of a variable type. */
+#define TCALIGNOF(TC_a) \
+  ((int)offsetof(struct { int8_t TC_top; TC_a TC_bot; }, TC_bot))
+
+
 /* Get the size of padding bytes for pointer alignment. */
+typedef union { int32_t i; int64_t l; double d; void *p; } tcgeneric_t;
 #define TCALIGNPAD(TC_hsiz) \
-  (((TC_hsiz | ~-(int)sizeof(void *)) + 1) - TC_hsiz)
+  (((TC_hsiz | ~-TCALIGNOF(tcgeneric_t)) + 1) - TC_hsiz)
 
 
 /* Alias of `tcxstrcat'. */
-- 
1.6.5.2.372.gc0502

